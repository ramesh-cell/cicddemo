# ðŸ‘‡ Workflow name as shown in GitHub Actions UI
name: Java Build on PR Merge

# ðŸ‘‡ Trigger the workflow only when a Pull Request is merged (closed AND merged = true)
on:
  pull_request:
    types: [closed]  # Trigger when a PR is closed (merged or not)

jobs:
  # ðŸ‘‡ Job to build and publish AFTER merge
  build:
    if: github.event.pull_request.merged == true  # Run only if PR was actually merged

    # GitHub-hosted Linux runner
    runs-on: ubuntu-latest

    # Minimal permission requirements
    permissions:
      contents: read        # Read repo contents
      packages: write       # Required to push to GitHub Packages
      pull-requests: write  # Needed to modify PRs (labels/comments)

    steps:
      # âœ… Step 1: Add labels to PR
      - name: Add Labels
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: |
            build-check
            needs-review
        # Labels are added even after merge for tracking/automation

      # âœ… Step 2: Assign reviewers (useful when PR is reopened too)
      - name: Assign Reviewers
        uses: ahmadnassri/action-request-review@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          reviewers: ramesh-cell
        # Replace with your username or a team slug (e.g., my-org/my-team)

      # âœ… Step 3: Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # âœ… Step 4: Set up JDK 21 using Temurin distribution
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      # âœ… Step 5: Set up Gradle environment
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # âœ… Step 6: Make Gradle wrapper executable (for Linux runners)
      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      # âœ… Step 7: Build, test, and generate JaCoCo test coverage
      - name: Build and Run Tests with JaCoCo Coverage
        run: ./gradlew clean test jacocoTestReport --no-daemon --stacktrace

      # âœ… Step 8: Upload the JaCoCo HTML report as an artifact
      - name: Upload Coverage Report (HTML)
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-html-report
          path: build/reports/jacoco/test/html

      # âœ… Step 9: Publish JARs to GitHub Packages (if maven-publish is configured)
      - name: Publish to GitHub Packages
        run: ./gradlew publish
        env:
          USERNAME: ${{ github.actor }}             # GitHub username
          TOKEN: ${{ secrets.GITHUB_TOKEN }}        # GitHub token injected by Actions runtime