# Name shown under GitHub Actions tab
name: Java Build with Gradle

# Trigger this workflow on every push to any branch
on:
  #push:
  pull_request:
    types: [closed]  # Trigger only when a PR is closed

jobs:
  build:
    if: github.event.pull_request.merged == true  # Ensure only on merge
    # Run the job on a GitHub-hosted Ubuntu Linux VM
    runs-on: ubuntu-latest

    # Define minimal required permissions
    permissions:
      contents: read        # Allows reading the repository content
      packages: write       # Required for publishing to GitHub Packages
      pull-requests: read

    steps:
      # Step 1: Checkout source code from the repository
      - name: Checkout code
        uses: actions/checkout@v4
        # Makes the repo code available to the workflow (Java, Gradle files, etc.)

      # Step 2: Set up Java 21 environment using Eclipse Temurin
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'            # Java version required for Spring Boot 3.2+/3.5+
          distribution: 'temurin'       # Temurin = Eclipse Adoptium build of OpenJDK
          cache: 'gradle'               # Caches Gradle dependencies across builds

      # Step 3: Setup Gradle and enable caching for better performance
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        # Automatically uses ./gradlew, caches Gradle User Home, and supports build scans

      # Step 4: Make the Gradle wrapper script executable (necessary for Unix runners)
      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      # Step 5: Clean, run unit tests, and generate JaCoCo test coverage report
      - name: Build and Run Tests with JaCoCo Coverage
        run: ./gradlew clean test jacocoTestReport --no-daemon --stacktrace
        # clean               → Removes previous build outputs
        # test                → Executes all unit tests
        # jacocoTestReport    → Generates HTML/XML code coverage reports
        # --no-daemon         → Avoid background Gradle daemons (better for CI)
        # --stacktrace        → Useful if errors occur during build/test

      # Step 6: Upload HTML coverage report as downloadable artifact
      - name: Upload Coverage Report (HTML)
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-html-report
          path: build/reports/jacoco/test/html
        # This will allow you to download/view the coverage report via the Actions tab

      # Step 7: Publish build artifacts to GitHub Packages (Maven repository)
      - name: Publish to GitHub Packages
        run: ./gradlew publish
        env:
          USERNAME: ${{ github.actor }}             # GitHub username for authentication
          TOKEN: ${{ secrets.GITHUB_TOKEN }}        # Secure token provided automatically by GitHub
        # Requires: maven-publish plugin + proper publishing {} configuration in build.gradle