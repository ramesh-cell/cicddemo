# Name of the GitHub Actions workflow (shown in the Actions tab)
name: Java Build with Gradle

# Trigger this workflow on every push to any branch
on:
  push:

jobs:
  build:
    # Run this job on the latest Ubuntu Linux runner hosted by GitHub
    runs-on: ubuntu-latest

    # Define permission scope for this job (read access to repo contents)
    permissions:
      contents: read

    steps:
    # Step 1: Checkout the latest code from the GitHub repository
    - uses: actions/checkout@v4
      # This step checks out the repository so all source code is available for the build

    # Step 2: Set up Java 21 using Temurin distribution
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'            # Set the JDK version to 21
        distribution: 'temurin'       # Use Eclipse Temurin as the JDK provider
      # This ensures the build uses Java 21, which is required for Spring Boot 3.2+ or 3.5+

    # Step 3: Setup Gradle wrapper caching and prepare environment
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      # This caches `.gradle` folder to speed up subsequent builds
      # Also sets up build scan and performance metrics if configured

    # Step 4: Make Gradle wrapper executable (Linux/Mac only, safe for Windows too)
    - name: Change wrapper permissions
      run: chmod +x ./gradlew
      # Ensures the Gradle wrapper script is executable on Linux-based runners

    # Step 5: Run the actual Gradle build
    - name: Build with Gradle Wrapper
      run: ./gradlew build
      # This will:
      # - Compile the main and test source code
      # - Run tests (unit and integration)
      # - Package the application (e.g., into a JAR)
      # - Fail the build if tests fail or compilation errors occur
